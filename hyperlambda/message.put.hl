
// Update one record in your message table in your fakebook database
.arguments

   // message_id column value being primary key of record to update, mandatory argument
   message_id:string

   // isRead column's new value
   isRead:long

   // isPhoto column's new value
   isPhoto:long

   // photoURL column's new value
   photoURL:string

   // recipient column's new value
   recipient:string

   // sender column's new value
   sender:string

   // text column's new value
   text:string

// Meta data description for endpoint
.description:Update one record in your message table in your fakebook database

// Type of endpoint
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/message_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|fakebook]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:message
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:fakebook.message.put
      args

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
